import * as vscode from 'vscode';
export function activate(context: vscode.ExtensionContext) {
    const shortcuts: { [key: string]: string } = {
        /* METAFORMAL */

        "@of" : "‚ùô",
        "@have" : "¬¶",

        /* PROOF */

        "@proof" : "‚ñ°‚ñ†", /* */

        /* ... */

        "@to" : "‚Üí", /* ‚ü∂ */
        "@rightarrow": "‚Üí",
        "@leftrightarrow" : "‚Üî", /* ‚ü∑ */

        "@mapsto" : "‚Ü¶", /* ‚üº */

        /* ... */

        "@langle" : "‚å©",
        "@rangle" : "‚å™",

        "@leq" : "‚â§", /* <Ã±  */
        "@geq" : "‚â•", /* >Ã± */
        "@wedge" : "‚àß",
        "@vee" : "‚à®",
        "@bigwedge" : "‚ãÄ",
        "@bigvee" : "‚ãÅ",
        
        /* LOGIC VERSION */

        "@l" : "‚Äã",

        "@l=" : "=‚Äã",

        "@lto" : "‚Üí‚Äã",
        "@lrightarrow": "‚Üí‚Äã",
        "@imp" : "‚Üí‚Äã",
        "@lleftrightarrow" : "‚Üî‚Äã",
        "@iff" : "‚Üî‚Äã",

        "@lmapsto" : "‚Ü¶‚Äã",

        "@llangle" : "‚å©‚Äã",
        "@lrangle" : "‚å™‚Äã",

        "@lleq" : "‚â§‚Äã",
        "@lgeq" : "‚â•‚Äã",
        "@lwedge" : "‚àß‚Äã",
        "@and" : "‚àß‚Äã",
        "@lvee" : "‚à®‚Äã",
        "@or" : "‚à®‚Äã",
        "@lbigwedge" : "‚ãÄ‚Äã",
        "@forall" : "‚ãÄ‚Äã",
        "@lbigvee" : "‚ãÅ‚Äã",
        "@exists" : "‚ãÅ‚Äã",
        "@ldoublewedge" : "‚©ì‚Äã",
        "@doubleand" : "‚©ì‚Äã",
        "@ldoublevee" : "‚©î‚Äã",
        "@doubleor" : "‚©î‚Äã",

        /* ‚•Ω ‚•º ‚•ø ‚•æ */
        "@nlt" : "‚â∫",
        "@ngt" : "‚âª",
        "@nleq" : "‚™Ø", /* ‚â∫Ã± */
        "@ngeq" : "‚™∞", /* ‚âªÃ± */
        "@nwedge" : "‚ãè",
        "@nvee" : "‚ãé",

        /* BAGS */

        "@in" : "‚àà",
        "@subset" : "‚äÇ",
        "@supset" : "‚äÉ",
        "@subseteq" : "‚äÜ", /* ‚äÇÃ± */
        "@supseteq" : "‚äá", /* ‚äÉÃ± */
        "@cap" : "‚à©",
        "@cup" : "‚à™",
        "@bigcup" : "‚ãÇ",
        "@bigcap" : "‚ãÉ",

        /* LISTS */

        "@sqin" : "‚ãø",
        "@sqsubset" : "‚äè",
        "@sqsupset" : "‚äê",
        "@sqsubseteq" : "‚äë", /* ‚äèÃ± */
        "@sqsupseteq" : "‚äí", /* ‚äêÃ± */
        "@sqcap" : "‚äì",
        "@sqcup" : "‚äî",
        "@bigsqcap" : "‚®Ö",
        "@bigsqcup" : "‚®Ü",

        "@lfloor" : "‚åä",
        "@rfloor" : "‚åã",
        "@lceil" : "‚åà",
        "@rceil" : "‚åâ",


        "@Dabla" : "‚àÜ",
        "@dabla" : "·∫ü",
        "@Nabla" : "‚àá",
        "@nabla" : "∆ç",
        "@sum" : "‚àë",
        "@int" : "‚à´",

        "@prod" : "‚àè",
        "@coprod" : "‚àê",

        /* Blackboard */

        "@bba" : "ùïí",
        "@bbb" : "ùïì",
        "@bbc" : "ùïî",
        "@bbd" : "ùïï",
        "@bbe" : "ùïñ",
        "@bbf" : "ùïó",
        "@bbg" : "ùïò",
        "@bbh" : "ùïô",
        "@bbi" : "ùïö",
        "@bbj" : "ùïõ",
        "@bbk" : "ùïú",
        "@bbl" : "ùïù",
        "@bbm" : "ùïû",
        "@bbn" : "ùïü",
        "@bbo" : "ùï†",
        "@bbp" : "ùï°",
        "@bbq" : "ùï¢",
        "@bbr" : "ùï£",
        "@bbs" : "ùï§",
        "@bbt" : "ùï•",
        "@bbu" : "ùï¶",
        "@bbv" : "ùïß",
        "@bbw" : "ùï®",
        "@bbx" : "ùï©",
        "@bby" : "ùï™",
        "@bbz" : "ùï´",
        
        "@bbA" : "ùî∏",
        "@bbB" : "ùîπ",
        "@bbC" : "‚ÑÇ",
        "@bbD" : "ùîª",
        "@bbE" : "ùîº",
        "@bbF" : "ùîΩ",
        "@bbG" : "ùîæ",
        "@bbH" : "‚Ñç",
        "@bbI" : "ùïÄ",
        "@bbJ" : "ùïÅ",
        "@bbK" : "ùïÇ",
        "@bbL" : "ùïÉ",
        "@bbM" : "ùïÑ",
        "@bbN" : "‚Ñï",
        "@bbO" : "ùïÜ",
        "@bbP" : "‚Ñô",
        "@bbQ" : "‚Ñö",
        "@bbR" : "‚Ñù",
        "@bbS" : "ùïä",
        "@bbT" : "ùïã",
        "@bbU" : "ùïå",
        "@bbV" : "ùïç",
        "@bbW" : "ùïé",
        "@bbX" : "ùïè",
        "@bbY" : "ùïê",
        "@bbZ" : "‚Ñ§",

        /* GREEK */

        "@alpha" : "Œ±",
        "@beta" : "Œ≤",
        "@varbeta" : "œê",
        "@gamma" : "Œ≥",
        "@delta" : "Œ¥",
        "@epsilon" : "œµ",
        "@varepsilon" : "Œµ",
        "@zeta" : "Œ∂",
        "@eta" : "Œ∑",
        "@theta" : "Œ∏",
        "@vartheta" : "œë",
        "@iota" : "Œπ",
        "@kappa" : "Œ∫",
        "@varkappa" : "œ∞",
        "@lambda" : "Œª",
        "@mu" : "Œº",
        "@nu" : "ŒΩ",
        "@xi" : "Œæ",
        "@omicron" : "Œø",
        "@pi" : "œÄ",
        "@varpi" : "œñ",
        "@rho" : "œÅ",
        "@varrho" : "œ±",
        "@sigma" : "œÉ",
        "@varsigma" : "œÇ",
        "@tau" : "œÑ",
        "@upsilon" : "œÖ",
        "@varupsilon" : "œí",
        "@phi" : "œï",
        "@varphi" : "œÜ",
        "@chi" : "œá",
        "@psi" : "œà",
        "@omega" : "œâ",

        "@Alpha" : "Œë",
        "@Beta" : "Œí",
        "@Gamma" : "Œì",
        "@Delta" : "Œî",
        "@Epsilon" : "Œï",
        "@Zeta" : "Œñ",
        "@Eta" : "Œó",
        "@Theta" : "Œòœ¥",
        "@Iota" : "Œô",
        "@Kappa" : "Œö",
        "@Lambda" : "Œõ",
        "@Mu" : "Œú",
        "@Nu" : "Œù",
        "@Xi" : "Œû",
        "@Omicron" : "Œü",
        "@Pi" : "Œ†",
        "@Rho" : "Œ°",
        "@Sigma" : "Œ£",
        "@Tau" : "Œ§",
        "@Upsilon" : "Œ•",
        "@Phi" : "Œ¶",
        "@Chi" : "Œß",
        "@Psi" : "Œ®",
        "@Omega" : "Œ©",

        "@ok" : "¬°", /* ! */
        "@boh" : "¬ø", /* ? */
        "@bok" : "‚∏ò" /* ‚ÄΩ */
        /* ‚ÅÑ */

        /* ‚Äï */
    };

    context.subscriptions.push(
        vscode.workspace.onDidChangeTextDocument(event => {
            const document = event.document;
            const changes = event.contentChanges;
    
            for (const change of changes) {
                const text = change.text;
                const range = change.range;
                const lineText = document.lineAt(range.start.line).text;
                const endOfLine = range.start.character;
    
                const beforeText = lineText.slice(0, endOfLine);
    
                for (const [shortcut, symbol] of Object.entries(shortcuts)) {
                    if (beforeText.endsWith(shortcut)) {
                        const start = endOfLine - shortcut.length;

                        const nextCharacter = lineText[endOfLine] || " ";
                        const isDelimiter = /\s|[()_@]/.test(nextCharacter);
    
                        if (isDelimiter) {
                            const startPosition = new vscode.Position(range.start.line, start);
                            const endPosition = new vscode.Position(range.start.line, endOfLine);
    
                            const replaceRange = new vscode.Range(startPosition, endPosition);
                            const edit = new vscode.WorkspaceEdit();
                            edit.replace(document.uri, replaceRange, symbol);
    
                            vscode.workspace.applyEdit(edit);
                            break;
                        }
                    }
                }
            }
        })
    );
}

export function deactivate() {}